include "Script/ML/UnitFramePanel/header"

static const string UNITLIST_KEYPREFIX = "ML/UnitFramePanel";
static const string PANEL_PATH = "UIContainer/ConsoleUIContainer/ML_Container/UnitFramePanel";
static const string ENTRYIDFIELD_PATH = "EntryID";
static const string ROTATIONFIELD_PATH = "Rotation";
static const string ENTRYNAMELABEL_PATH = "UnitName";
static const string PAUSEBTN_PATH = "Pause";
static const string MODELFRAME_PATH = "UnitModelContainer/UnitModelFrame";
static const fixed TIMER_PERIOD = 12.00;
static const fixed ROTATIONTIMER_PERIOD = 0.05;


static int Panel;
static int EntryIdField;
static int RotationField;
static int EntryNameLabel;
static int ModelFrame;

static int PauseBtn;
static trigger PauseBtnTrigger;

static timer Timer;
static trigger TimerTrigger;

static int Rotation;
static timer RotationTimer;
static trigger RotationTimerTrigger;

static int UnitListCurrentIndex = -1;


static string UnitListCountKey(){
    string format = "{keyprefix}::Count";
    return StringReplaceWord(format,"{keyprefix}",UNITLIST_KEYPREFIX,1,true);
}


static string UnitListIndexKey(int index){
    string format = "{keyprefix}[{index}]";
    return StringReplaceWord(StringReplaceWord(format,"{keyprefix}",UNITLIST_KEYPREFIX,1,true),"{index}",IntToString(index),1,true);
}

static void UnitListSetCount(int count){
    DataTableSetInt(true,UnitListCountKey(),count);
}
static int UnitListGetCount(){
    int count = 0;
    if(DataTableValueExists(true,UnitListCountKey())){
        count = DataTableGetInt(true,UnitListCountKey());
    }
    return count;
}

static void UnitListSet(int index,string unitId){
    DataTableSetString(true,UnitListIndexKey(index),unitId);
}


static string UnitListGet(int index){
    string unitId = null;
    if(DataTableValueExists(true,UnitListIndexKey(index))){
        unitId = DataTableGetString(true,UnitListIndexKey(index));
    }
    return unitId;
}


static void UnitListAdd(string unitId){
    int count = UnitListGetCount();
    UnitListSet(count,unitId);
    UnitListSetCount(count+1);
}

static void PanelSetUnit(string unitId){
    DialogControlSetPropertyAsString(EntryIdField,c_triggerControlPropertyEditText,PlayerGroupAll(),unitId);
    DialogControlSetPropertyAsText(EntryNameLabel,c_triggerControlPropertyText,PlayerGroupAll(),StringToText(unitId));
    Wait(0,c_timeReal);
    DialogControlSendAnimationEvent(ModelFrame,PlayerGroupAll(),"KeepPaused");
}


static void PanelSetNextUnit(){
    UnitListCurrentIndex +=1;
    if( (UnitListCurrentIndex>=UnitListGetCount()) || (UnitListCurrentIndex<0)){
        UnitListCurrentIndex = 0;
    }
    PanelSetUnit(UnitListGet(UnitListCurrentIndex));
}


static void PanelSetUnitRotation(int val){
    DialogControlSetPropertyAsString(RotationField,c_triggerControlPropertyEditText,PlayerGroupAll(),IntToString(val));
}


bool ML_UnitFramePanel_RotationTimerFunc(bool a, bool b){
    Rotation +=1;
    if( (Rotation>=360) || (Rotation<0)){
        Rotation = 0;
        PanelSetNextUnit();
    }
    PanelSetUnitRotation(Rotation);
    
    return true;
}


bool ML_UnitFramePanel_TimerFunc(bool a, bool b){
    PanelSetNextUnit();
    
    return true;
}


bool ML_UnitFramePanel_PauseButtonFunc(bool a, bool b){
    bool toggledState = DialogControlGetPropertyAsBool(PauseBtn,c_triggerControlPropertyToggled,EventPlayer());
    TimerPause(RotationTimer,!toggledState);
    DialogControlSetPropertyAsBool(PauseBtn,c_triggerControlPropertyToggled,PlayerGroupAll(),!toggledState);
    
    //DialogControlSendAnimationEvent(ModelFrame,PlayerGroupAll(),"PauseRotation");
    return true;
}


static bool UnitListFilter(string entry){
    bool isUnit = true;
    int catalog = c_gameCatalogUnit;
    isUnit = isUnit && (CatalogFieldValueGetAsInt(catalog,entry,"FlagArray[Missile]",c_playerAny) == 0);
    isUnit = isUnit && (CatalogFieldValueGetAsInt(catalog,entry,"EditorFlags[NoPlacement]",c_playerAny) == 0);
    isUnit = isUnit && (CatalogFieldValueGetAsInt(catalog,entry,"EditorFlags[NeutralDefault]",c_playerAny) == 0);
    isUnit = isUnit && (CatalogFieldValueGetAsInt(catalog,entry,"GlossaryPriority",c_playerAny) > 0);
    isUnit = isUnit && (!StringContains(CatalogFieldValueGet(catalog,entry,"EditorCategories",c_playerAny),"ObjectFamily:Storymode",c_stringAnywhere,false));
    isUnit = isUnit && (!StringContains(CatalogFieldValueGet(catalog,entry,"EditorCategories",c_playerAny),"ObjectType:Shape",c_stringAnywhere,false));
    return isUnit;
}


static void InitUnitList(){
    int i = 0;
    int catalog = c_gameCatalogUnit;
    string catalogEntry = null;
    int catalogCount = CatalogEntryCount(catalog)-1;
    for(i=1;i<catalogCount;i+=1){
        catalogEntry = CatalogEntryGet(catalog,i);
        if(UnitListFilter(catalogEntry)){
            //TriggerDebugOutput(1,
            //    StringToText(
            //        "GlossaryPriority for "+catalogEntry+": "+IntToString(CatalogFieldValueGetAsInt(catalog,catalogEntry,"GlossaryPriority",c_playerAny))
            //    ),
            //    true);
            UnitListAdd(catalogEntry);
        }
    }

}

static void InitTimer(){
    Timer = TimerCreate();
    TimerStart(Timer,TIMER_PERIOD,true,c_timeReal);
    TimerTrigger = TriggerCreate("ML_UnitFramePanel_TimerFunc");
    //TriggerAddEventTimer(TimerTrigger,Timer);
    RotationTimer = TimerCreate();
    TimerStart(RotationTimer,ROTATIONTIMER_PERIOD,true,c_timeReal);
    RotationTimerTrigger = TriggerCreate("ML_UnitFramePanel_RotationTimerFunc");
    TriggerAddEventTimer(RotationTimerTrigger,RotationTimer);
}

static void InitUI(){
    Panel = DialogControlHookupStandard(c_triggerControlTypePanel,PANEL_PATH);

    EntryIdField = DialogControlHookup(Panel,c_triggerControlTypeEditBox,ENTRYIDFIELD_PATH);
    RotationField = DialogControlHookup(Panel,c_triggerControlTypeEditBox,ROTATIONFIELD_PATH);
    EntryNameLabel = DialogControlHookup(Panel,c_triggerControlTypeLabel,ENTRYNAMELABEL_PATH);
    ModelFrame = DialogControlHookup(Panel,c_triggerControlTypeUnitModel,MODELFRAME_PATH);
    
    PauseBtn = DialogControlHookup(Panel,c_triggerControlTypeButton,PAUSEBTN_PATH);
    
    //DialogControlSetPropertyAsBool(PauseBtn,c_triggerControlPropertyEnabled,PlayerGroupAll(),false);

    PauseBtnTrigger = TriggerCreate("ML_UnitFramePanel_PauseButtonFunc");
    DialogControlSetPropertyAsBool(PauseBtn,c_triggerControlPropertyToggled,PlayerGroupAll(),false);
    TriggerAddEventDialogControl(PauseBtnTrigger,c_playerAny,PauseBtn,c_triggerControlEventTypeClick);
}

void ML_UnitFramePanel_init(){
    InitUnitList();
    InitUI();
    InitTimer();
    
    UnitListCurrentIndex = 1;
    PanelSetUnit(UnitListGet(UnitListCurrentIndex));
}